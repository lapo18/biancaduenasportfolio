---
import { Icon } from "astro-icon";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { NavItem } from "~/types";

const navItems: Array<NavItem> = [
  { title: "Proyectos", url: "#features" },
  { title: "Sobre Mi", url: "#compatibility" },
];
---

<header
  id="page-header"
  class="absolute top-0 z-20  w-full border-b border-transparent px-8 py-4 uppercase"
>
  <nav class="mx-auto flex items-center justify-between max-w-5xl">
    <a class="flex items-center gap-3 hover:!text-default" href="#">
      <h1 class="sr-only">Bianca Dueñas Diseñadora UX/UI</h1>
      <Icon name="logo-manchaBD" class="h-[60px]" />
    </a>
    <div>
      <div class="flex items-center gap-6">
        <nav class="hidden sm:block">
          <ul class="flex items-center gap-6">
            {
              navItems.map(({ title, url }) => (
                <li>
                  <a class="text-base text-[#3A4F66] font-semibold font-display" href={url}>
                    {title}
                  </a>
                </li>
              ))
            }
            <li><div class="p-10">

              <div class="dropdown inline-block relative">
                <button class="bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded inline-flex items-center">
                  <span class="mr-1">ES</span>
                  <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/> </svg>
                </button>
                <ul class="dropdown-menu absolute hidden text-gray-700 pt-1">
                  <li class=""><a class="rounded-t bg-gray-200 hover:bg-gray-400 py-2 px-4 block whitespace-no-wrap" href="/">ES</a></li>
                  <li class=""><a class="bg-gray-200 hover:bg-gray-400 py-2 px-4 block whitespace-no-wrap" href="/en">EN</a></li>
                </ul>
              </div>
            
            </div></li>
          </ul>
          
        </nav>
        <button
          id="open-nav-button"
          type="button"
          class="btn sm:hidden"
          aria-label="Navigation"
        >
          <Icon pack="mdi" name="menu" class="h-8" />
        </button>
        <ThemeSwitcher />
      </div>
      <div id="menu-modal" class="modal hidden" aria-hidden="true">
        <div class="fixed w-screen h-screen slide-left left-[100vw] inset-0 bg-default px-8 py-4 text-default">
          <div class="space-y-4" role="dialog" aria-modal="true">
            <header class="text-right">
              <button
                id="close-nav-button"
                type="button"
                class="btn"
                aria-label="Close navigation"
              >
                <Icon pack="mdi" name="close" class="h-8" />
              </button>
            </header>
            <div class="flex justify-center">
              <Icon name="logo-manchaBD" class="h-16" />
            </div>
            <nav>
              <ul class="flex flex-col">
                {
                  navItems.map(({ title, url }) => (
                    <li>
                      <a class="text-[#3A4F66] block py-4 text-center text-xl font-bold font-display" href={url}>
                        {title}
                      </a>
                    </li>
                  ))
                }
                <div class="absolute bottom-5 right-7 text-[#3A4F66] flex py-4 gap-2 justify-center text-xl font-bold font-display"><a href="./">ES</a>|<a href="/en">EN</a></div>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true,awaitOpenAnimation: true, });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.scrollTop ;
    header.classList.toggle("fixed-header", d > 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
  /* ----------------------------------------------
  Generated by AnimatiSS
  Licensed under FreeBSD License
  URL: https://xsgames.co/animatiss
  Twitter: @xsgames_
---------------------------------------------- */

.slide-left{
  animation:slide-left 0.3s linear both
}
@keyframes 
slide-left{
  0%{transform:translateX(0)}
  100%{transform:translateX(-100vw)}}
  .dropdown:hover .dropdown-menu {
  display: block;
}
</style>
